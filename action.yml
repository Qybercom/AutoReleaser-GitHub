name: 'AutoReleaser'
author: 'Alexandru Furnica'
description: 'Automatically create release by selected platform'
branding:
  icon: package
  color: green
inputs:
  platform:
    description: 'Target platform (labeled|branched|filed|npm|composer|e.t.c.)'
    required: true
  github_token:
    description: 'GitHub secret from secrets.GITHUB_TOKEN'
    required: true
  nodeJSVersion:
    description: 'NodeJS version'
    default: '16.0'
runs:
  using: 'composite'
  steps:
    - name: Init
      shell: bash
      run: |
        echo "AUTORELEASER_VERSION_NEXT=0.0.0" >> $GITHUB_ENV
        mkdir ../autoreleaser && mkdir ../autoreleaser/dist
        echo "AUTORELEASER_DIST=../autoreleaser/dist" >> $GITHUB_ENV

    # https://github.com/marketplace/actions/get-latest-release
    - name: Get current release version
      id: versionCurrent
      uses: pozetroninc/github-action-get-latest-release@master
      with:
        repository: ${{ github.repository }}
        excludes: prerelease, draft

    - name: Checkout current release code
      uses: actions/checkout@master


    # https://github.com/marketplace/actions/extract-package-version
    - name: '[NPM] Get next release version'
      id: versionNextNPM
      if: ${{ inputs.platform == 'npm' }}
      uses: Saionaro/extract-package-version@v1.0.6

    - name: Export next version to ENV
      if: ${{ inputs.platform == 'npm' }}
      shell: bash
      run: echo "AUTORELEASER_VERSION_NEXT=${{ steps.versionNextNPM.outputs.version }}" >> $GITHUB_ENV


    - name: Print release versions
      shell: bash
      run: echo "Version ${{ steps.releaseVersionCurrent.outputs.release }} -> ${{ env.AUTORELEASER_VERSION_NEXT }}"

    - name: No new version
      if: ${{ steps.versionCurrent.outputs.release == env.AUTORELEASER_VERSION_NEXT }}
      shell: bash
      run: echo "Versions are same, stop creating release"


    - name: '[NPM] Build: Checkout current release code'
      id: buildNPM
      if: ${{ steps.versionCurrent.outputs.release != env.AUTORELEASER_VERSION_NEXT && inputs.platform == 'npm' }}
      uses: actions/checkout@master

    - name: '[NPM] Build: Use NodeJS ${{ inputs.nodeJSVersion }}'
      if: ${{ steps.versionCurrent.outputs.release != env.AUTORELEASER_VERSION_NEXT && inputs.platform == 'npm' }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ inputs.nodeJSVersion }}

    - name: '[NPM] Build: npm run build'
      if: ${{ steps.versionCurrent.outputs.release != env.AUTORELEASER_VERSION_NEXT && inputs.platform == 'npm' }}
      shell: bash
      run: |
        npm install
        npm run build
        npm test
        cp -a ./dist/. ${{ env.AUTORELEASER_DIST }}


    # https://www.youtube.com/watch?v=_ueJ3LrRqPU&ab_channel=MicrosoftDevRadio
    - name: Create next release archive
      if: ${{ steps.versionCurrent.outputs.release != env.AUTORELEASER_VERSION_NEXT }}
      uses: thedoctor0/zip-release@master
      with:
        directory: ${{ env.AUTORELEASER_DIST }}
        filename: release.zip

    - name: Create next release
      if: ${{ steps.versionCurrent.outputs.release != env.AUTORELEASER_VERSION_NEXT }}
      id: releaseCreate
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: ${{ env.AUTORELEASER_VERSION_NEXT }}
        release_name: Release ${{ env.AUTORELEASER_VERSION_NEXT }}

    - name: Upload release artifacts
      if: ${{ steps.versionCurrent.outputs.release != env.AUTORELEASER_VERSION_NEXT }}
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        upload_url: ${{ steps.releaseCreate.outputs.upload_url }}
        asset_path: ${{ env.AUTORELEASER_DIST }}/release.zip
        asset_name: ${{ github.event.repository.name }}-${{ steps.releaseVersionNext.outputs.version }}.zip
        asset_content_type: application/zip


    - name: '[NPM] Publish to platform registry'
      id: publishNPM
      if: ${{ steps.versionCurrent.outputs.release != env.AUTORELEASER_VERSION_NEXT && inputs.platform == 'npm' }}
      shell: bash
      run: echo "Placeholder for publishing"